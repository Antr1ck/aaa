#include <iostream>

using namespace std;

template <typename T> class Node 
{
public:
    T data; 
    Node* next; 
    Node* prev;
};

template <typename T> class Queue 
{
private:
    Node<T>* head; 
    Node<T>* tail;
    int size;

public:
    Queue() : head{ nullptr }, tail{ nullptr }, size{ 0 } {}

    ~Queue() 
    {
        while (!isEmpty()) 
        {
            del(); 
        }
    }

    bool isEmpty() const 
    {
        return size == 0;
    }


    int getSize() const 
    {
        return size;
    }

    void pushb(T number) 
    {
        Node<T>* newNode = new Node<T>(number);
        if (isEmpty()) 
        {
            head = tail = newNode; 
        }
        else
        {
            tail->next = newNode; 
            newNode->prev = tail; 
            tail = newNode; 
        }
        size++;
    }

    void push(T number) 
    {
        Node<T>* newNode = new Node<T>(number);
        if (isEmpty()) 
        {
            head = tail = newNode; 
        }
        else
        {
            newNode->next = head;
            head->prev = newNode;
            head = newNode;
        }
        size++;
    }

    T del() {
        if (isEmpty()) 
        {
            return T(); 
        }
        Node<T>* temp = head; 
        T number = head->data; 
        head = head->next; 

        if (head) 
        {
            head->prev = nullptr; 
        }
        else 
        {
            tail = nullptr; 
        }

        delete temp; 
        size--;
        return number;
    }

 
    T dellb() 
    {
        if (isEmpty()) 
        {
            return T(); 
        }
        Node<T>* temp = tail; 
        T number = tail->data; 
        tail = tail->prev; 

        if (tail) 
        {
            tail->next = nullptr; 
        }
        else 
        {
            head = nullptr;
        }

        delete temp; 
        size--;
        return number;
    }

    T function() const
    {
        if (isEmpty()) 
        {
            return T();
        }
        return head->data;
    }

    T back() const 
    {
        if (isEmpty()) 
        {
            return T();
        }
        return tail->data;
    }
};
